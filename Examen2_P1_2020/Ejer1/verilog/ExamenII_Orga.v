/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */
module DIG_ROM_1024X53_CacheMem (
    input [9:0] A,
    input sel,
    output reg [52:0] D
);
    reg [52:0] my_rom [0:-1];

    always @ (*) begin
        if (~sel)
            D = 53'hz;
        else if (A > 10'hffffffffffffffff)
            D = 53'h0;
        else
            D = my_rom[A];
    end

    initial begin
    end
endmodule


module CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule


module ExamenII_Orga (
  input [31:0] addr,
  output [31:0] data,
  output hit
);
  wire [9:0] index;
  wire [52:0] s0;
  wire [19:0] s1;
  wire [19:0] tag;
  wire valid;
  wire [1:0] byte_offset;
  assign byte_offset = addr[1:0];
  assign index = addr[11:2];
  assign tag = addr[31:12];
  // CacheMem
  DIG_ROM_1024X53_CacheMem DIG_ROM_1024X53_CacheMem_i0 (
    .A( index ),
    .sel( 1'b1 ),
    .D( s0 )
  );
  assign data = s0[31:0];
  assign s1 = s0[51:32];
  assign valid = s0[52];
  CompUnsigned #(
    .Bits(20)
  )
  CompUnsigned_i1 (
    .a( s1 ),
    .b( tag ),
    .\= ( hit )
  );
endmodule
